var log = function (s) {
  return function () {
    console.log(s);
    return {};
  };
};

var warn = function (s) {
  return function () {
    console.warn(s);
    return {};
  };
};

var error = function (s) {
  return function () {
    console.error(s);
    return {};
  };
};

var info = function (s) {
  return function () {
    console.info(s);
    return {};
  };
};

var time = function (s) {
  return function () {
    console.time(s);
    return {};
  };
};

var timeLog = function (s) {
  return function () {
    console.timeLog(s);
    return {};
  };
};

var timeEnd = function (s) {
  return function () {
    console.timeEnd(s);
    return {};
  };
};

var clear = function () {
  console.clear();
  return {};
};

var foreign = {
	log: log,
	warn: warn,
	error: error,
	info: info,
	time: time,
	timeLog: timeLog,
	timeEnd: timeEnd,
	clear: clear
};

var showIntImpl = function (n) {
  return n.toString();
};

var showNumberImpl = function (n) {
  var str = n.toString();
  return isNaN(str + ".0") ? str : str + ".0";
};

var showCharImpl = function (c) {
  var code = c.charCodeAt(0);
  if (code < 0x20 || code === 0x7F) {
    switch (c) {
      case "\x07": return "'\\a'";
      case "\b": return "'\\b'";
      case "\f": return "'\\f'";
      case "\n": return "'\\n'";
      case "\r": return "'\\r'";
      case "\t": return "'\\t'";
      case "\v": return "'\\v'";
    }
    return "'\\" + code.toString(10) + "'";
  }
  return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
};

var showStringImpl = function (s) {
  var l = s.length;
  return "\"" + s.replace(
    /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
    function (c, i) {
      switch (c) {
        case "\"":
        case "\\":
          return "\\" + c;
        case "\x07": return "\\a";
        case "\b": return "\\b";
        case "\f": return "\\f";
        case "\n": return "\\n";
        case "\r": return "\\r";
        case "\t": return "\\t";
        case "\v": return "\\v";
      }
      var k = i + 1;
      var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
      return "\\" + c.charCodeAt(0).toString(10) + empty;
    }
  ) + "\"";
};

var showArrayImpl = function (f) {
  return function (xs) {
    var ss = [];
    for (var i = 0, l = xs.length; i < l; i++) {
      ss[i] = f(xs[i]);
    }
    return "[" + ss.join(",") + "]";
  };
};

var cons = function (head) {
  return function (tail) {
    return [head].concat(tail);
  };
};

var join = function (separator) {
  return function (xs) {
    return xs.join(separator);
  };
};

var foreign$1 = {
	showIntImpl: showIntImpl,
	showNumberImpl: showNumberImpl,
	showCharImpl: showCharImpl,
	showStringImpl: showStringImpl,
	showArrayImpl: showArrayImpl,
	cons: cons,
	join: join
};

// module Data.Symbol

var unsafeCoerce = function (arg) {
  return arg;
};

var foreign$2 = {
	unsafeCoerce: unsafeCoerce
};

var SProxy = (function () {
    function SProxy() {

    }    SProxy.value = new SProxy();
    return SProxy;
})();
var IsSymbol = function (reflectSymbol) {
    this.reflectSymbol = reflectSymbol;
};
var reifySymbol = function (s) {
    return function (f) {
        return foreign$2.unsafeCoerce(function (dictIsSymbol) {
            return f(dictIsSymbol);
        })({
            reflectSymbol: function (v) {
                return s;
            }
        })(SProxy.value);
    };
};
var reflectSymbol = function (dict) {
    return dict.reflectSymbol;
};
var Data_Symbol = {
    IsSymbol: IsSymbol,
    reflectSymbol: reflectSymbol,
    reifySymbol: reifySymbol,
    SProxy: SProxy
};

var unsafeHas = function (label) {
  return function (rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
};

var unsafeGet = function (label) {
  return function (rec) {
    return rec[label];
  };
};

var unsafeSet = function (label) {
  return function (value) {
    return function (rec) {
      var copy = {};
      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy[key] = rec[key];
        }
      }
      copy[label] = value;
      return copy;
    };
  };
};

var unsafeDelete = function (label) {
  return function (rec) {
    var copy = {};
    for (var key in rec) {
      if (key !== label && {}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };
};

var foreign$3 = {
	unsafeHas: unsafeHas,
	unsafeGet: unsafeGet,
	unsafeSet: unsafeSet,
	unsafeDelete: unsafeDelete
};

var Record_Unsafe = {
    unsafeHas: foreign$3.unsafeHas,
    unsafeGet: foreign$3.unsafeGet,
    unsafeSet: foreign$3.unsafeSet,
    unsafeDelete: foreign$3.unsafeDelete
};

// Generated by purs version 0.13.6
var RLProxy = (function () {
    function RLProxy() {

    }    RLProxy.value = new RLProxy();
    return RLProxy;
})();
var Type_Data_RowList = {
    RLProxy: RLProxy
};

var ShowRecordFields = function (showRecordFields) {
    this.showRecordFields = showRecordFields;
};
var Show = function (show) {
    this.show = show;
};
var showString = new Show(foreign$1.showStringImpl);
var showRecordFieldsNil = new ShowRecordFields(function (v) {
    return function (v1) {
        return [  ];
    };
});
var showRecordFields = function (dict) {
    return dict.showRecordFields;
};
var showRecord = function (dictRowToList) {
    return function (dictShowRecordFields) {
        return new Show(function (record) {
            var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
            if (v.length === 0) {
                return "{}";
            }            return foreign$1.join(" ")([ "{", foreign$1.join(", ")(v), "}" ]);
        });
    };
};
var showNumber = new Show(foreign$1.showNumberImpl);
var showInt = new Show(foreign$1.showIntImpl);
var showChar = new Show(foreign$1.showCharImpl);
var showBoolean = new Show(function (v) {
    if (v) {
        return "true";
    }    if (!v) {
        return "false";
    }    throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (dictShow) {
    return new Show(foreign$1.showArrayImpl(show(dictShow)));
};
var showRecordFieldsCons = function (dictIsSymbol) {
    return function (dictShowRecordFields) {
        return function (dictShow) {
            return new ShowRecordFields(function (v) {
                return function (record) {
                    var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                    var focus = Record_Unsafe.unsafeGet(key)(record);
                    return foreign$1.cons(foreign$1.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                };
            });
        };
    };
};
var Data_Show = {
    Show: Show,
    show: show,
    ShowRecordFields: ShowRecordFields,
    showRecordFields: showRecordFields,
    showBoolean: showBoolean,
    showInt: showInt,
    showNumber: showNumber,
    showChar: showChar,
    showString: showString,
    showArray: showArray,
    showRecord: showRecord,
    showRecordFieldsNil: showRecordFieldsNil,
    showRecordFieldsCons: showRecordFieldsCons
};

var warnShow = function (dictShow) {
    return function (a) {
        return foreign.warn(Data_Show.show(dictShow)(a));
    };
};
var logShow = function (dictShow) {
    return function (a) {
        return foreign.log(Data_Show.show(dictShow)(a));
    };
};
var infoShow = function (dictShow) {
    return function (a) {
        return foreign.info(Data_Show.show(dictShow)(a));
    };
};
var errorShow = function (dictShow) {
    return function (a) {
        return foreign.error(Data_Show.show(dictShow)(a));
    };
};
var Effect_Console = {
    logShow: logShow,
    warnShow: warnShow,
    errorShow: errorShow,
    infoShow: infoShow,
    log: foreign.log,
    warn: foreign.warn,
    error: foreign.error,
    info: foreign.info,
    time: foreign.time,
    timeLog: foreign.timeLog,
    timeEnd: foreign.timeEnd,
    clear: foreign.clear
};

var main = Effect_Console.log("Hello world");
var Main = {
    main: main
};
var Main_1 = Main.main;

export default Main;
export { Main_1 as main };
